name: Check a pull request

# on: [pull_request]
on: push

env:
  QT_VERSION: 5.12.9

jobs:
#  build_linux:
#    strategy:
#      matrix:
#        configuration: [Debug, Release]
#        compiler: [gcc-5, gcc-10, clang-9]
#        cmake_options: [""]
#        include:
#          # Also include configurations that check if the code compiles without the graphics backends
#          - configuration: Debug
#            compiler: gcc-10
#            cmake_options: -DFSO_BUILD_WITH_OPENGL=OFF -DFSO_BUILD_WITH_VULKAN=OFF
#          - configuration: Release
#            compiler: gcc-10
#            cmake_options: -DFSO_BUILD_WITH_OPENGL=OFF -DFSO_BUILD_WITH_VULKAN=OFF
#    name: Linux
#    runs-on: ubuntu-latest
#    container: ghcr.io/scp-fs2open/linux_build:sha-e977d36
#    steps:
#      - name: Cache Qt
#        id: cache-qt-lin
#        uses: actions/cache@v1
#        with:
#          path: ${{ github.workspace }}/../Qt
#          key: ${{ runner.os }}-QtCache-${{ env.QT_VERSION }}
#      - name: Install Qt
#        uses: jurplel/install-qt-action@v2
#        with:
#          version: ${{ env.QT_VERSION }}
#          dir: ${{ github.workspace }}/..
#          cached: ${{ steps.cache-qt-lin.outputs.cache-hit }}
#          setup-python: 'false'
#
#      - uses: actions/checkout@v1
#        name: Checkout
#        with:
#          submodules: true
#          fetch-depth: 0
#      - name: Configure CMake
#        shell: bash
#        env:
#          CONFIGURATION: ${{ matrix.configuration }}
#          COMPILER: ${{ matrix.compiler }}
#          JOB_CMAKE_OPTIONS: ${{ matrix.cmake_options }}
#        run: |
#          if [ "$COMPILER" = "gcc-5" ]; then
#            export CC=gcc-5
#            export CXX=g++-5
#          fi
#          if [ "$COMPILER" = "gcc-10" ]; then
#            export CC=gcc-10
#            export CXX=g++-10
#          fi
#          if [ "$COMPILER" = "clang-9" ]; then
#            # Work around bug in clang that uses the wrong installation directory: https://bugs.llvm.org/show_bug.cgi?id=47460
#            export CC=$(readlink -f $(which clang-9))
#            export CXX=$(readlink -f $(which clang++-9))
#          fi
#
#          LD_LIBRARY_PATH=$Qt5_DIR/lib:$LD_LIBRARY_PATH
#          CXXFLAGS="-m64 -mtune=generic -mfpmath=sse -msse -msse2 -pipe -Wno-unknown-pragmas"
#          CFLAGS="-m64 -mtune=generic -mfpmath=sse -msse -msse2 -pipe -Wno-unknown-pragmas"
#
#          CMAKE_OPTIONS="$JOB_CMAKE_OPTIONS"
#          if [[ "$COMPILER" =~ ^clang.*$ ]]; then
#              CMAKE_OPTIONS="$CMAKE_OPTIONS -DCLANG_USE_LIBCXX=ON"
#          fi
#
#          mkdir build
#          cd build
#
#          export CXXFLAGS
#          export CFLAGS
#          export LD_LIBRARY_PATH
#          CMAKE="cmake -G Ninja -DFSO_FATAL_WARNINGS=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON $CMAKE_OPTIONS"
#          eval $CMAKE -DCMAKE_BUILD_TYPE=$CONFIGURATION -DFSO_BUILD_TESTS=ON -DFSO_BUILD_INCLUDED_LIBS=ON -DFSO_BUILD_QTFRED=ON ..
#      - name: Compile
#        working-directory: ./build
#        run: LD_LIBRARY_PATH=$Qt5_DIR/lib:$LD_LIBRARY_PATH ninja -k 20 all
#      - name: Run Tests
#        working-directory: ./build
#        env:
#          CONFIGURATION: ${{ matrix.configuration }}
#          XDG_RUNTIME_DIR: /root
#        run: |
#          if [ "$CONFIGURATION" = "Debug" ]; then
#              valgrind --leak-check=full --error-exitcode=1 --gen-suppressions=all \
#                  --suppressions="$GITHUB_WORKSPACE/ci/travis/valgrind.supp" ./bin/unittests --gtest_shuffle
#          else
#              ./bin/unittests --gtest_shuffle
#          fi
#      - name: Run Clang Tidy
#        # Clang-tidy reuses the precompiled headers so this only makes sense for the clang compilers
#        if: startsWith(matrix.compiler, 'clang-')
#        run: $GITHUB_WORKSPACE/ci/linux/clang_tidy.sh ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }}
#      - name: Process clang-tidy warnings
#        if: startsWith(matrix.compiler, 'clang-')
#        uses: asarium/clang-tidy-action@v1
#        with:
#          fixesFile: clang-fixes.yaml
  build_windows:
    strategy:
      matrix:
        configuration: [Debug, Release]
        compiler: [MSVC]
        arch: [x86, x64]
    name: Windows
    runs-on: windows-2019
    steps:
      - name: Prepare Environment
        run: choco install ninja
      - uses: actions/checkout@v1
        name: Checkout
        with:
          submodules: true
      - name: Cache Qt
        id: cache-qt-win
        uses: actions/cache@v1
        with:
          path: ${{ github.workspace }}/../Qt
          key: ${{ runner.os }}-${{ matrix.arch }}-QtCache-${{ env.QT_VERSION }}
      - name: Install Qt (32 bit)
        uses: jurplel/install-qt-action@v2
        if: ${{ matrix.compiler  == 'MSVC' && matrix.arch == 'x86' }}
        with:
          version: ${{ env.QT_VERSION }}
          dir: ${{ github.workspace }}/..
          arch: win32_msvc2017
          cached: ${{ steps.cache-qt-win.outputs.cache-hit }}
          aqtversion: ==0.8
      - name: Install Qt (64 bit)
        uses: jurplel/install-qt-action@v2
        if: ${{ matrix.compiler  == 'MSVC' && matrix.arch == 'x64' }}
        with:
          version: ${{ env.QT_VERSION }}
          dir: ${{ github.workspace }}/..
          arch: win64_msvc2017_64
          cached: ${{ steps.cache-qt-win.outputs.cache-hit }}
          aqtversion: ==0.8

      - name: Setup VS command prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
          #sdk: 8.1
          toolset: 14.28.29333
      - name: Configure CMake
        env:
          CONFIGURATION: ${{ matrix.configuration }}
          COMPILER: ${{ matrix.compiler }}
        shell: bash
        run: |
          mkdir build
          cd build

          if [ "$COMPILER" = "MinGW" ]; then
              cmake -DFSO_USE_SPEECH="OFF" -DFSO_FATAL_WARNINGS="ON" -DFSO_USE_VOICEREC="OFF" -DFSO_BUILD_TESTS="ON" \
                  -DFSO_BUILD_FRED2="OFF" -DCMAKE_BUILD_TYPE=$CONFIGURATION -G "Ninja" ..
          else
              export CC=cl
              export CXX=cl
              cmake -DFSO_USE_SPEECH="ON" -DFSO_FATAL_WARNINGS="ON" -DFSO_USE_VOICEREC="OM" -DFSO_BUILD_TESTS="ON" \
                  -DMSVC_SIMD_INSTRUCTIONS=SSE2 -DFSO_BUILD_FRED2="ON" -G "Ninja" \
                  -DFSO_BUILD_QTFRED=ON -DCMAKE_BUILD_TYPE=$CONFIGURATION ..
          fi
      - name: Compile
        working-directory: ./build
        env:
          CONFIGURATION: ${{ matrix.configuration }}
          COMPILER: ${{ matrix.compiler }}
        shell: bash
        run: cmake --build . --config "$CONFIGURATION"
      - name: Run Tests
        working-directory: ./build
        env:
          CONFIGURATION: ${{ matrix.configuration }}
          COMPILER: ${{ matrix.compiler }}
        shell: bash
        run: ./bin/unittests --gtest_shuffle
