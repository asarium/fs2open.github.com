#extension GL_EXT_texture_array : enable
#ifdef FLAG_LIGHT
uniform int n_lights;
uniform float light_factor;
#endif
#ifdef FLAG_DIFFUSE_MAP
uniform sampler2D sBasemap;
uniform int desaturate;
uniform vec3 desaturate_clr;
uniform int blend_alpha;
#endif
#ifdef FLAG_GLOW_MAP
uniform sampler2D sGlowmap;
#endif
#ifdef FLAG_SPEC_MAP
uniform sampler2D sSpecmap;
#endif
#ifdef FLAG_ENV_MAP
uniform samplerCube sEnvmap;
uniform bool alpha_spec;
varying vec3 envReflect;
#endif
#ifdef FLAG_NORMAL_MAP
uniform sampler2D sNormalmap;
varying mat3 tbnMatrix;
#endif
#ifdef FLAG_FOG
varying float fogDist;
#endif
#ifdef FLAG_ANIMATED
uniform sampler2D sFramebuffer;
uniform int effect_num;
uniform float anim_timer;
uniform float vpwidth;
uniform float vpheight;
#endif
#ifdef FLAG_TRANSFORM
varying float not_visible;
#endif
#ifdef FLAG_TEAMCOLOR
uniform vec3 base_color;
uniform vec3 stripe_color;
vec2 teamMask = vec2(0.0, 0.0);
#endif
#ifdef FLAG_MISC_MAP
uniform sampler2D sMiscmap;
#endif
#ifdef FLAG_SHADOWS
varying vec4 shadow_vec[4];
varying vec4 pos_shadow;
//uniform sampler2DArrayShadow shadow_map;
uniform sampler2DArray shadow_map;
//uniform sampler2D shadow_map;
uniform float znear;
uniform float zfar;
uniform float veryneardist;
uniform float neardist;
uniform float middist;
uniform float fardist;
#endif
#ifdef FLAG_CLIP
uniform int use_clip_plane;
varying float clip_distance;
#endif
varying vec4 position;
varying vec3 lNormal;

#if SHADER_MODEL == 2
  #define MAX_LIGHTS 2
#else
  #define MAX_LIGHTS 8
#endif
#define SPEC_INTENSITY_POINT			5.3 // Point light
#define SPEC_INTENSITY_DIRECTIONAL		3.0 // Directional light
#define SPECULAR_FACTOR				1.75
#define SPECULAR_ALPHA					0.1
#define SPEC_FACTOR_NO_SPEC_MAP		0.6
#define ENV_ALPHA_FACTOR				0.3
#define GLOW_MAP_INTENSITY				1.5
#define AMBIENT_LIGHT_BOOST			1.0
#define VARIANCE_SHADOW_SCALE			1000000.0
#define VARIANCE_SHADOW_SCALE_INV		1.0/VARIANCE_SHADOW_SCALE

#ifdef FLAG_SHADOWS
vec2 sampleShadowMap(vec2 uv, vec2 offset_uv, int cascade, float shadowMapSizeInv)
{
	return texture2DArray(shadow_map, vec3(uv + offset_uv * shadowMapSizeInv, float(cascade))).xy;
}

float computeShadowFactor(vec2 moments, float bias)
{
	float shadow = 1.0;
	if((moments.x - bias) > pos_shadow.z)
	{
		// variance shadow mapping using Chebychev's Formula
		float variance = moments.y * VARIANCE_SHADOW_SCALE - moments.x * moments.x;
		float mD = moments.x - bias - pos_shadow.z;
		shadow = variance / (variance + mD * mD);
		shadow = clamp(shadow, 0.0, 1.0);
	}
	return shadow;
}

float sampleNoPCF(int cascade)
{
	return computeShadowFactor(sampleShadowMap(shadow_vec[cascade].xy, vec2(0.0, 0.0), cascade, 1.0/1024.0), 0.05);
}

float samplePoissonPCF(int cascade)
{
	if(cascade > 3 || cascade < 0) return 1.0;
	vec2 poissonDisc[16];
	poissonDisc[0] = vec2(-0.76275, -0.3432573);
	poissonDisc[1] = vec2(-0.5226235, -0.8277544);
	poissonDisc[2] = vec2(-0.3780261, 0.01528688);
	poissonDisc[3] = vec2(-0.7742821, 0.4245702);
	poissonDisc[4] = vec2(0.04196143, -0.02622231);
	poissonDisc[5] = vec2(-0.2974772, -0.4722782);
	poissonDisc[6] = vec2(-0.516093, 0.71495);
	poissonDisc[7] = vec2(-0.3257416, 0.3910343);
	poissonDisc[8] = vec2(0.2705966, 0.6670476);
	poissonDisc[9] = vec2(0.4918377, 0.1853267);
	poissonDisc[10] = vec2(0.4428544, -0.6251478);
	poissonDisc[11] = vec2(-0.09204347, 0.9267113);
	poissonDisc[12] = vec2(0.391505, -0.2558275);
	poissonDisc[13] = vec2(0.05605913, -0.7570801);
	poissonDisc[14] = vec2(0.81772, -0.02475523);
	poissonDisc[15] = vec2(0.6890262, 0.5191521);
	float maxUVOffset[4];
	maxUVOffset[0] = 1.0/300.0;
	maxUVOffset[1] = 1.0/250.0;
	maxUVOffset[2] = 1.0/200.0;
	maxUVOffset[3] = 1.0/200.0;
	vec2 sum = sampleShadowMap(shadow_vec[cascade].xy, poissonDisc[0], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(shadow_vec[cascade].xy, poissonDisc[1], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(shadow_vec[cascade].xy, poissonDisc[2], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(shadow_vec[cascade].xy, poissonDisc[3], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(shadow_vec[cascade].xy, poissonDisc[4], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(shadow_vec[cascade].xy, poissonDisc[5], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(shadow_vec[cascade].xy, poissonDisc[6], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(shadow_vec[cascade].xy, poissonDisc[7], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(shadow_vec[cascade].xy, poissonDisc[8], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(shadow_vec[cascade].xy, poissonDisc[9], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(shadow_vec[cascade].xy, poissonDisc[10], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(shadow_vec[cascade].xy, poissonDisc[11], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(shadow_vec[cascade].xy, poissonDisc[12], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(shadow_vec[cascade].xy, poissonDisc[13], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(shadow_vec[cascade].xy, poissonDisc[14], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(shadow_vec[cascade].xy, poissonDisc[15], cascade, maxUVOffset[cascade])*(1.0/16.0);
	return computeShadowFactor(sum, 0.1);
}
float getShadowValue()
{
	// Valathil's Shadows
	float depth = -position.z;
	int cascade = 4;
	cascade -= int(step(depth, fardist));
	cascade -= int(step(depth, middist));
	cascade -= int(step(depth, neardist));
	cascade -= int(step(depth, veryneardist));
	float cascade_start_dist[5];
	cascade_start_dist[0] = 0.0;
	cascade_start_dist[1] = veryneardist;
	cascade_start_dist[2] = neardist;
	cascade_start_dist[3] = middist;
	cascade_start_dist[4] = fardist;
	if(cascade > 3 || cascade < 0) return 1.0;
	float dist_threshold = (cascade_start_dist[cascade+1] - cascade_start_dist[cascade])*0.2;
	if(cascade_start_dist[cascade+1] - dist_threshold > depth)
		return samplePoissonPCF(cascade);
	return mix(samplePoissonPCF(cascade), samplePoissonPCF(cascade+1), smoothstep(cascade_start_dist[cascade+1] - dist_threshold, cascade_start_dist[cascade+1], depth));
}
#endif
void main()
{
#ifdef FLAG_TRANSFORM
	if(not_visible >= 0.9) { discard; }
#endif
#ifdef FLAG_SHADOW_MAP
 #ifdef FLAG_CLIP
	if(use_clip_plane == 1) { if(clip_distance <= 0.0) { discard; } }
 #endif
	// need depth and depth squared for variance shadow maps
	gl_FragData[0] = vec4(position.z, position.z * position.z * VARIANCE_SHADOW_SCALE_INV, 0.0, 1.0);
	return;
#endif
	vec3 eyeDir = vec3(normalize(-position).xyz);
	vec3 lightAmbientDiffuse = vec3(0.0, 0.0, 0.0);
   vec3 lightDiffuse = vec3(0.0, 0.0, 0.0);
   vec3 lightAmbient = vec3(0.0, 0.0, 0.0);
   vec4 lightSpecular = vec4(0.0, 0.0, 0.0, 1.0);
	vec2 texCoord = gl_TexCoord[0].xy;
	vec4 baseColor = gl_Color;
	vec4 posData = vec4(position.xyz,1.0);
	vec4 normData = vec4(0.0, 0.0, 0.0, 1.0);
	vec4 specData = vec4(0.0, 0.0, 0.0, 1.0);
	vec3 unitNormal = normalize(lNormal);
	vec3 normal = unitNormal;
#ifdef FLAG_NORMAL_MAP
   // Normal map - convert from DXT5nm
   vec2 normalSample;
   normal.rg = normalSample = (texture2D(sNormalmap, texCoord).ag * 2.0) - 1.0;
   normal.b = sqrt(1.0 - dot(normal.rg, normal.rg));
   normal = tbnMatrix * normal;
   float norm = length(normal);
   // prevent breaking of normal maps
   if (norm > 0.0)
      normal /= norm;
   else
      normal = unitNormal;
#endif
	normData = vec4(normal,1.0);

#ifdef FLAG_ANIMATED
   vec2 distort = vec2(cos(position.x*position.w*0.005+anim_timer*20.0)*sin(position.y*position.w*0.005),sin(position.x*position.w*0.005+anim_timer*20.0)*cos(position.y*position.w*0.005))*0.03;
#endif

#ifdef FLAG_DIFFUSE_MAP
	vec2 diffuseTexCoord = texCoord;
 #ifdef FLAG_ANIMATED
   if (effect_num == 2) {
      diffuseTexCoord = texCoord + distort*(1.0-anim_timer);
   }
 #endif
	baseColor = texture2D(sBasemap, diffuseTexCoord);
	if ( blend_alpha == 0 && baseColor.a < 0.95 ) discard; // if alpha blending is not on, discard transparent pixels
	// premultiply alpha if blend_alpha is 1. assume that our blend function is srcColor + (1-Alpha)*destColor.
	// if blend_alpha is 2, assume blend func is additive and don't modify color
	if(blend_alpha == 1) baseColor.rgb = baseColor.rgb * baseColor.a;
#endif

   specData = vec4(baseColor.rgb * SPEC_FACTOR_NO_SPEC_MAP, 1.0);
#ifdef FLAG_SPEC_MAP
   vec4 specColour = texture2D(sSpecmap, texCoord);
   specData = vec4(specColour.rgb * SPECULAR_FACTOR, 1.0);
#endif

#ifdef FLAG_MISC_MAP
 #ifdef FLAG_TEAMCOLOR
	vec2 teamMask = vec2(0.0, 0.0);
	teamMask = texture2D(sMiscmap, texCoord).rg;
	vec3 base = base_color - vec3(0.5);
	vec3 stripe = stripe_color - vec3(0.5);
	baseColor.rgb += (base * teamMask.x) + (stripe * teamMask.y);
 #endif
#endif

	float shadow = 1.0;
#ifdef FLAG_SHADOWS
	shadow = getShadowValue();
#endif

#ifdef FLAG_LIGHT
	vec3 lightDir;
   lightAmbient = vec3(gl_FrontMaterial.emission + (gl_LightModel.ambient * gl_FrontMaterial.ambient));
   float dist;
   #pragma optionNV unroll all
   for (int i = 0; i < MAX_LIGHTS; ++i) {
 #if SHADER_MODEL > 2
      if (i > n_lights)
         break;
 #endif
      if(i > 0)
         shadow = 1.0;
      float specularIntensity = SPEC_INTENSITY_DIRECTIONAL;
      lightDir = normalize(gl_LightSource[i].position.xyz);
      float attenuation = 1.0;
 #ifndef FLAG_DEFERRED
  #if SHADER_MODEL > 2
      if (gl_LightSource[i].position.w == 1.0) {
  #else
      if (gl_LightSource[i].position.w == 1.0 && i != 0) {
  #endif
          // Positional light source
          dist = distance(gl_LightSource[i].position.xyz, position.xyz);
          lightDir = (gl_LightSource[i].position.xyz - position.xyz);
  #if SHADER_MODEL > 2
          if (gl_LightSource[i].spotCutoff < 91.0) {  // Tube light
              float beamlength = length(gl_LightSource[i].spotDirection);
              vec3 beamDir = normalize(gl_LightSource[i].spotDirection);
              // Get nearest point on line
              float neardist = dot(position.xyz - gl_LightSource[i].position.xyz , beamDir);
              // Move back from the endpoint of the beam along the beam by the distance we calculated
              vec3 nearest = gl_LightSource[i].position.xyz - beamDir * abs(neardist);
              lightDir = nearest - position.xyz;
              dist = length(lightDir);
          }
  #endif
          lightDir = normalize(lightDir);
          attenuation = 1.0 / (gl_LightSource[i].constantAttenuation + (gl_LightSource[i].linearAttenuation * dist) + (gl_LightSource[i].quadraticAttenuation * dist * dist));
          specularIntensity = SPEC_INTENSITY_POINT;
      }
 #endif
      // Attenuation and light direction
      vec3 half_vec = normalize(lightDir + eyeDir);
      // Ambient and Diffuse
      lightAmbient += (gl_FrontLightProduct[i].ambient.rgb * attenuation) * shadow;
      lightDiffuse += (gl_FrontLightProduct[i].diffuse.rgb * light_factor * (max(dot(normal, lightDir), 0.0)) * attenuation) * shadow;
      // Specular
      float NdotHV = clamp(dot(normal, half_vec), 0.0, 1.0);
      lightSpecular += ((gl_FrontLightProduct[i].specular * pow(NdotHV, gl_FrontMaterial.shininess)) * attenuation) * specularIntensity * shadow;
   }
	lightAmbientDiffuse = lightAmbient + lightDiffuse;
#else
   lightAmbientDiffuse = gl_Color.rgb;
   lightSpecular = gl_SecondaryColor;
#endif

	baseColor.rgb *= max(lightAmbientDiffuse.rgb * AMBIENT_LIGHT_BOOST, gl_LightModel.ambient.rgb - 0.425);
	baseColor.rgb += lightSpecular.rgb * specData.rgb;
#ifdef FLAG_ENV_MAP
   vec3 envReflectNM = envReflect;
 #ifdef FLAG_NORMAL_MAP
   envReflectNM += vec3(normalSample, 0.0);
 #endif
   vec4 envColour = textureCube(sEnvmap, envReflectNM);
   vec3 envIntensity = (alpha_spec) ? vec3(specColour.a) : specColour.rgb;
   baseColor.rgb += envColour.rgb * envIntensity;
#endif

#ifdef FLAG_GLOW_MAP
   baseColor.rgb += texture2D(sGlowmap, texCoord).rgb * GLOW_MAP_INTENSITY;
#endif

#ifdef FLAG_FOG
	vec3 fogColor = gl_Fog.color.rgb;
 #ifdef FLAG_DIFFUSE_MAP
	if(blend_alpha == 1) fogColor *= baseColor.a;
 #endif
   baseColor.rgb = mix(baseColor.rgb, fogColor, fogDist);
	specData.rgb *= fogDist;
#endif

#ifdef FLAG_DIFFUSE_MAP
	if(desaturate == 1) {
		baseColor.rgb = desaturate_clr * dot(vec3(1.0), baseColor.rgb) * 0.3333333;
	}
#endif
#ifdef FLAG_ANIMATED
   if (effect_num == 0) {
      float shinefactor = 1.0/(1.0 + pow(abs((fract(abs(texCoord.x))-anim_timer) * 1000.0), 2.0)) * 1000.0;
      baseColor.rgb = baseColor.rgb + vec3(shinefactor);
      baseColor.a = baseColor.a * clamp(shinefactor * (fract(abs(texCoord.x))-anim_timer) * -10000.0,0.0,1.0);
   }
   if (effect_num == 1) {
      float shinefactor = 1.0/(1.0 + pow(abs(position.y-anim_timer), 2.0));
      baseColor.rgb = baseColor.rgb + vec3(shinefactor);
 #ifdef FLAG_LIGHT
      baseColor.a = baseColor.a;
 #else
      // ATI Wireframe fix *grumble*
      baseColor.a = clamp((position.y-anim_timer) * 10000.0,0.0,1.0);
 #endif
   }
   if (effect_num == 2) {
      vec2 screenPos = gl_FragCoord.xy * vec2(vpwidth,vpheight);
      baseColor.a = baseColor.a;
      float cloak_interp = (sin(position.x*position.w*0.005+anim_timer*20.0)*sin(position.y*position.w*0.005)*0.5)-0.5;
 #ifdef FLAG_LIGHT
      baseColor.rgb = mix(texture2D(sFramebuffer, screenPos + distort*anim_timer + anim_timer*0.1*normal.xy).rgb,baseColor.rgb,clamp(cloak_interp+anim_timer*2.0,0.0,1.0));
 #else
      baseColor.rgb = mix(texture2D(sFramebuffer, screenPos + distort*anim_timer + anim_timer*0.1*lNormal.xy).rgb,baseColor.rgb,clamp(cloak_interp+anim_timer*2.0,0.0,1.0));
 #endif
   }
#endif
#ifdef FLAG_CLIP
	// for some odd reason if we try to discard the pixel early for plane clipping, it screws up glow maps so let's just do it down here.
	if(use_clip_plane == 1) { if(clip_distance <= 0.0) { discard; } }
#endif
   gl_FragData[0] = baseColor;
#ifdef FLAG_DEFERRED
	gl_FragData[1] = posData;
	gl_FragData[2] = normData;
	gl_FragData[3] = specData;
#endif
}
