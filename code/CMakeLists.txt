
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/project.h.in ${GENERATED_SOURCE_DIR}/project.h)

INCLUDE(source_groups.cmake)

INCLUDE(default_files.cmake)

INCLUDE(voice_rec.cmake)

ADD_LIBRARY(code INTERFACE)

target_compile_definitions(code INTERFACE "$<$<CONFIG:RELEASE>:NDEBUG>;$<$<CONFIG:DEBUG>:_DEBUG;$<$<CXX_COMPILER_ID:MSVC>:PDB_DEBUGGING=1>>")

TARGET_INCLUDE_DIRECTORIES(code INTERFACE ${CODE_HEADERS})
TARGET_INCLUDE_DIRECTORIES(code INTERFACE ${FREESPACE_HEADERS})

TARGET_INCLUDE_DIRECTORIES(code INTERFACE ${GENERATED_SOURCE_DIR})
TARGET_INCLUDE_DIRECTORIES(code INTERFACE ${GENERATED_SOURCE_DIR}/code)
TARGET_INCLUDE_DIRECTORIES(code INTERFACE "${COMPILER_INCLUDES}")
TARGET_INCLUDE_DIRECTORIES(code INTERFACE "${PLATFORM_INCLUDES}")

TARGET_LINK_LIBRARIES(code INTERFACE ${OPENAL_LIBS})
TARGET_LINK_LIBRARIES(code INTERFACE ${LUA_LIBS})
TARGET_LINK_LIBRARIES(code INTERFACE ${PNG_LIBS})
TARGET_LINK_LIBRARIES(code INTERFACE ${JPEG_LIBS})

TARGET_LINK_LIBRARIES(code INTERFACE ${OGG_LIBS})
TARGET_LINK_LIBRARIES(code INTERFACE ${VORBIS_LIBS})
TARGET_LINK_LIBRARIES(code INTERFACE ${VORBISFILE_LIBS})
TARGET_LINK_LIBRARIES(code INTERFACE ${THEORA_LIBS})

TARGET_LINK_LIBRARIES(code INTERFACE ${SDL_LIBS})

TARGET_LINK_LIBRARIES(code INTERFACE avcodec)
TARGET_LINK_LIBRARIES(code INTERFACE avformat)
TARGET_LINK_LIBRARIES(code INTERFACE avutil)
TARGET_LINK_LIBRARIES(code INTERFACE swscale)
TARGET_LINK_LIBRARIES(code INTERFACE swresample)

TARGET_LINK_LIBRARIES(code INTERFACE "${PLATFORM_LBRARIES}")
TARGET_LINK_LIBRARIES(code INTERFACE "${COMPILER_LBRARIES}")

TARGET_LINK_LIBRARIES(code boost)

IF (FSO_USE_SPEECH)
	TARGET_LINK_LIBRARIES(code ${SPEECH_LIBRARIES})
	target_compile_definitions(code INTERFACE -DFS2_SPEECH)
ENDIF(FSO_USE_SPEECH)

# Headers for standalone "gui" on UNIX
IF(UNIX)
	TARGET_LINK_LIBRARIES(code INTERFACE ${JANSSON_LIBS})
	TARGET_LINK_LIBRARIES(code INTERFACE ${MONGOOSE_LIBS})
ENDIF(UNIX)

IF(FSO_BUILD_TOOLS)
	ADD_SUBDIRECTORY(cfilearchiver)

	ADD_SUBDIRECTORY(cfileextractor)
ENDIF(FSO_BUILD_TOOLS)

ADD_LIBRARY(code_objs OBJECT ${file_root} ${DEF_OUT_FILES} ${VOICE_REC_FILES})
target_include_directories(code_objs PUBLIC "$<TARGET_PROPERTY:code,INTERFACE_INCLUDE_DIRECTORIES>")
IF(COTIRE_ENABLE)
	# Disable unity build as it doesn't work well for us
	set_target_properties(code_objs PROPERTIES COTIRE_ADD_UNITY_BUILD FALSE)

	IF(DEFINED CMAKE_CONFIGURATION_TYPES)
		cotire(code_objs CONFIGURATIONS ${CMAKE_CONFIGURATION_TYPES})
	ELSE(DEFINED CMAKE_CONFIGURATION_TYPES)
		cotire(code_objs)
	ENDIF(DEFINED CMAKE_CONFIGURATION_TYPES)
ENDIF(COTIRE_ENABLE)
