
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/project.h.in ${GENERATED_SOURCE_DIR}/project.h)

INCLUDE(source_groups.cmake)

INCLUDE(default_files.cmake)

INCLUDE(voice_rec.cmake)

ADD_LIBRARY(code STATIC ${file_root} ${DEF_OUT_FILES} ${VOICE_REC_FILES})

target_compile_definitions(code PUBLIC "$<$<CONFIG:RELEASE>:NDEBUG>;$<$<CONFIG:DEBUG>:_DEBUG>")
if (MSVC)
	target_compile_definitions(code PUBLIC "PDB_DEBUGGING=1")
endif(MSVC)

TARGET_INCLUDE_DIRECTORIES(code PUBLIC ${CODE_HEADERS})
TARGET_INCLUDE_DIRECTORIES(code PUBLIC ${FREESPACE_HEADERS})

TARGET_INCLUDE_DIRECTORIES(code PUBLIC ${GENERATED_SOURCE_DIR})
TARGET_INCLUDE_DIRECTORIES(code PUBLIC ${GENERATED_SOURCE_DIR}/code)
TARGET_INCLUDE_DIRECTORIES(code PUBLIC "${COMPILER_INCLUDES}")
TARGET_INCLUDE_DIRECTORIES(code PUBLIC "${PLATFORM_INCLUDES}")

TARGET_LINK_LIBRARIES(code PUBLIC ${OPENAL_LIBS})
TARGET_LINK_LIBRARIES(code PUBLIC ${LUA_LIBS})
TARGET_LINK_LIBRARIES(code PUBLIC ${PNG_LIBS})
TARGET_LINK_LIBRARIES(code PUBLIC ${JPEG_LIBS})

TARGET_LINK_LIBRARIES(code PUBLIC ${OGG_LIBS})
TARGET_LINK_LIBRARIES(code PUBLIC ${VORBIS_LIBS})
TARGET_LINK_LIBRARIES(code PUBLIC ${VORBISFILE_LIBS})
TARGET_LINK_LIBRARIES(code PUBLIC ${THEORA_LIBS})

TARGET_LINK_LIBRARIES(code PUBLIC ${SDL_LIBS})

TARGET_LINK_LIBRARIES(code PUBLIC "${PLATFORM_LBRARIES}")
TARGET_LINK_LIBRARIES(code PUBLIC "${COMPILER_LBRARIES}")

target_link_libraries(code PUBLIC ${LUABIND_LIBS})

IF (FSO_USE_SPEECH)
	TARGET_LINK_LIBRARIES(code PUBLIC ${SPEECH_LIBRARIES})
	target_compile_definitions(code PUBLIC -DFS2_SPEECH)
ENDIF(FSO_USE_SPEECH)

# Headers for standalone "gui" on UNIX
IF(UNIX)
	TARGET_LINK_LIBRARIES(code PUBLIC ${JANSSON_LIBS})
	TARGET_LINK_LIBRARIES(code PUBLIC ${MONGOOSE_LIBS})
ENDIF(UNIX)

IF(FSO_BUILD_TOOLS)
	ADD_SUBDIRECTORY(cfilearchiver)

	ADD_SUBDIRECTORY(cfileextractor)
ENDIF(FSO_BUILD_TOOLS)

include(util)
configure_cotire(code)

include(Cxx11.cmake)
